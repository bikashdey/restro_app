continue
@restaurant.reviews
restro.save
restro = @restaurant.reviews.new(param)
param[:user_id] = 1
param = review_params
restro.save!
restro = @restaurant.reviews.new(review_params)
@restaurant.reviews
@restaurant
review_params
param = review_params
continue
current_user
continue
current_user
continue
current_user
params
continue
current_user.present?
continue
current_user.User?
continue
current_user
current_user.restaurant.create!(create_params)
current_user.restaurants.build.new(create_params)
@restaurant
@restaurant.save!
next
current_user
@restaurant = current_user.restaurants.build.new(create_params)
continue
 @restaurant = current_user.restaurants.build.new(create_params)
current_user.restaurants.build.new(create_params)
@restaurant.save!
next
continue
@restaurant.save!
dish_params = create_params
next
create_params
@restaurant = Restaurant.new(create_params)
next
continue
return nil if restaurant_dishes.blank?
continue
next
Dish.find(1)
restaurant_dishes
next
continue
dishes_restaurants
Restaurant.dishes
Restaurant.dishes_restaurants.where(name: params[:dish])
params[:dish].present?
continue
Restaurant.dishes
continue
params[:dish].present?
continue
status
restro.update(status: status)
restro = Restaurant.find_by(id: id)
continue
id
continue
self.status_changed?
continue
Sidekiq.redis(&:flushdb)
Restaurants::RestroWorker.perform_at(5.minutes.from_now,id,self.status) if self.status_changed?
continue
next
Sidekiq::RestroWorkerJob.perform_at(5.minutes.from_now,id,self.status) if self.status_changed?RestroWorker.perform_at(5.minutes.from_now,id,self.status) if self.status_changed?
continue
Sidekiq::RestroWorkerJob.perform_at(5.minutes.from_now,id,self.status) if self.status_changed?
continue
self.status_changed?
continue
self.status
self.status_changed?
continue
self.status
self.status_changed?
continue
self.status_changed?
continue
update_params = create_params
restro = Restaurant.find(params[:id])
continue
self
self.status
self.status_changed?
continue

continue
next
